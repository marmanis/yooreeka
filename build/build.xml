<?xml version="1.0" encoding="UTF-8"?>

<project name="Yooreeka" default="dist" basedir=".">


	<!-- set global properties for this build -->
	<property name="project.Name" value="Yooreeka: A library for data mining, machine learning, soft computing, and mathematical analysis"/>

	<property name="y.root" location=".."/>
	<property name="y.build" value="${y.root}/build"/>
	<property name="y.data" value="${y.root}/data"/>
	<property name="y.deploy" value="${y.root}/deploy"/>
	<property name="y.javadoc" value="${y.root}/docs/javadoc"/>
	<property name="y.lib" value="${y.root}/lib"/>
	<property name="y.src" value="${y.root}/src/main/java"/>
	<property name="y.test" value="${y.root}/src/test/java"/>
	<property name="y.tools" value="${y.root}/tools"/>

	<property name="y.build.bytecode" value="${y.build}/bytecode"/>
	<property name="y.build.dist" value="${y.build}/dist"/>
	<property name="y.build.log" value="${y.build}/log"/>
	<property name="y.build.temp" value="${y.build}/temp"/>

	<property name="y.deploy.lib" value="${y.deploy}/lib"/>

	<property name="yooreeka.jar" value="yooreeka-2.2.jar"/>

	<property environment="env"/>

	<!-- list of all jars that are currently used in iweb2 app -->
	<patternset id="thirdparty.jars">
		<include name="bsh-2.0b4.jar"/>
		<include name="commons-cli-1.2.jar"/>
		<include name="commons-lang3-3.1.jar"/>
		<include name="commons-logging-1.1.1.jar"/>
		<include name="commons-text-1.10.0.jar"/>
		<include name="httpclient5-5.2.1.jar"/>
		<include name="httpcore5-5.2.jar"/>
		<include name="httpcore5-h2-5.2.jar"/>
		
		<include name="jakarta.mail-2.0.2.jar"/>
		<include name="jcommon-1.0.20.jar"/>
		<include name="jfreechart-1.0.16.jar"/>
		
		<include name="jigg-0.1.jar"/>
		
		<include name="junit-4.1.jar"/>
		<include name="juniversalchardet-1.0.3.jar"/>
		
		<include name="lucene-analyzers-common-4.4.0.jar"/>
		<include name="lucene-core-4.4.0.jar"/>
		<include name="lucene-demo-4.4.0.jar"/>
		<include name="lucene-memory-4.4.0.jar"/>
		<include name="lucene-queryparser-4.4.0.jar"/>
		
		<include name="nekohtml.jar"/>
		<include name="poi-3.14-20160307.jar"/>
		<include name="resolver.jar"/>
		<include name="rooster.jar"/>
		<include name="secondstring-20120620.jar"/>
		<include name="serializer.jar"/>
		<include name="super-csv-2.1.0.jar"/>
		<include name="tika-app-1.11.jar"/>
		<include name="tika-server-1.11.jar"/>
		<include name="tm-extractors-1.0.jar"/>
		<include name="xercesImpl.jar"/>
		<include name="xml-apis.jar"/>
	</patternset>
	<patternset id="drools.jars">
		<include name="antlr-runtime-3.3.jar"/>
		<include name="drools-compiler-5.5.0.Final.jar"/>
		<include name="drools-core-5.5.0.Final.jar"/>
		<include name="ecj-3.5.1.jar"/>
		<include name="knowledge-api-5.5.0.Final.jar"/>
		<include name="knowledge-internal-api-5.5.0.Final.jar"/>
		<include name="mvel2-2.1.3.Final.jar"/>
		<include name="slf4j-api-1.6.4.jar"/>
		<include name="slf4j-jdk14-1.7.2.jar"/>
	</patternset>
	<patternset id="crawler4j.jars">
		<include name="apache-mime4j-core-0.7.jar"/>
		<include name="apache-mime4j-dom-0.7.jar"/>
		<include name="asm-3.1.jar"/>
		<include name="boilerpipe-1.1.0.jar"/>
		<include name="commons-compress-1.3.jar"/>
		<include name="crawler4j-3.3.jar"/>
		<include name="geronimo-stax-api_1.0_spec-1.0.1.jar"/>
		<include name="je-4.0.92.jar"/>
		<include name="metadata-extractor-2.4.0-beta-1.jar"/>
		<include name="tagsoup-1.2.1.jar"/>
	</patternset>

	<!-- Compilation Classpath -->
	<path id="compile.classpath">
		<fileset dir="${y.lib}">
			<patternset refid="thirdparty.jars" />
		</fileset>
		<fileset dir="${y.lib}/crawler4j-libs">
			<patternset refid="crawler4j.jars" />
		</fileset>
		<fileset dir="${y.lib}/drools">
			<patternset refid="drools.jars" />
		</fileset>

	</path>

	<!-- Javadoc Sourcepath -->
	<path id="javadoc.sourcepath">
		<fileset dir="${y.src}">
			<include name="**/*.java"/>
		</fileset>
	</path>


	<target name="init">
		<!-- Create the time stamp -->
		<tstamp>
			<format property="year" pattern="yyyy" />
		</tstamp>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${y.build.bytecode}"/>
		<mkdir dir="${y.build.temp}"/>
		<mkdir dir="${y.build.log}"/>
		<echo message="------------------- ${project.Name} ----------------------"/>
		<echo message=""/>
		<echo message="PATH = ${env.PATH}"/>
		<echo message="CLASSPATH = ${env.CLASSPATH}"/>
		<echo message="java.home = ${env.JAVA_HOME}"/>
		<echo message="ant.home = ${env.ANT_HOME}"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="root: ${y.root}"/>
		<echo message="build: ${y.build}"/>
		<echo message="deploy: ${y.deploy}"/>

		<!-- check that build was started with empty classpath -->
		<condition property="CLASSPATH.ok">
			<not>
				<isset property="env.CLASSPATH"/>
			</not>
		</condition>

		<!-- feel free to remove this check if you are confident that configured classpath won't cause any issues. -->
		<fail message="You have CLASSPATH set in your environment. This may cause issues while running build." unless="CLASSPATH.ok"/>

	</target>

	<!-- Build everything from scratch.  -->
	<target name="all" depends="dist,docs">
		<echo message="All the source code has been compiled and the javadocs were created." />
	</target>

	<!-- Compile the java code into bytecode -->
	<target name="compile" depends="init">
		<javac srcdir="${y.src};${y.test}"
         destdir="${y.build.bytecode}"
	 fork="true"
         debug="on"
  	     compiler="modern"
         optimize="off"
         deprecation="on"
	 failonerror="true">
			<classpath refid="compile.classpath"/>
		</javac>
	</target>

	<target name="tc" depends="tidy,dist" description="Clean up everything before compiling"/>

	<!-- Default target -->
	<target name="dist" depends="compile">

		<mkdir dir="${y.build.dist}"/>


		<!-- Put everything in ${y.build.bytecode} into the JAR file -->
		<jar jarfile="${y.build.dist}/${yooreeka.jar}" basedir="${y.build.bytecode}" update="true">
			<manifest>
				<section name="common">
					<attribute name="Implementation-Title" value="Yooreeka"/>
					<attribute name="Implementation-Version" value="2.2.0.0 ${TODAY}"/>
					<attribute name="Implementation-Vendor" value="Marmanis Group LLC"/>
				</section>
			</manifest>
		</jar>

		<copy file="${y.build.dist}/${yooreeka.jar}" todir="${y.deploy.lib}" />
		<copy todir="${y.deploy.lib}">
			<fileset dir="${y.lib}">
				<patternset refid="thirdparty.jars"/>
			</fileset>
		</copy>

		<echo message="The ${yooreeka.jar} has been created and placed in ${y.deploy.lib}" />

	</target>

	<!--
       ===================================================================
         Cleans up build and distribution directories
       ===================================================================
  -->
	<target name="clean"
          description="--> cleans up y.build.bytecode and dist directories, if any.">
		<delete dir="${y.build.bytecode}"/>
		<delete dir="${y.build.dist}" />
		<delete dir="${y.build.log}" />
		<delete dir="${y.build.temp}" />
						
		<delete file="${y.deploy.lib}/${yooreeka.jar}"/>
		<delete>
			<fileset dir="${y.deploy.lib}">
				<patternset refid="thirdparty.jars"/>
				<exclude name="bsh-2.0b4.jar"/>
			</fileset>
		</delete>
	</target>

	<!--
       ===================================================================
         Cleans bytecode and old source files
       ===================================================================
  -->
	<target name="clean-all"
          depends="clean"
          description="--> cleans up bytecode, distros, and old source files">

		<delete dir="${y.build.dist}" />
		<delete>
			<fileset dir="${basedir}" includes="**/*~" defaultexcludes="no"/>
		</delete>
		<delete>
			<fileset dir="${y.src}" includes="**/*~" defaultexcludes="no"/>
		</delete>
		<delete>
			<fileset dir="${y.src}" includes="**/*.bak" defaultexcludes="no"/>
		</delete>
		<delete>
			<fileset dir="." includes="**/*.jar" defaultexcludes="no"/>
		</delete>
		<delete includeemptydirs="true">
		    <fileset dir="${y.data}" defaultexcludes="false">
 				<include name="ch02/crawl-*/**" />
		    	<include name="ch03/dataset_script_2.ser" />
		    	<include name="ch05/MyNeuralClassifier" />
		    </fileset>
		</delete>
	</target>

	<!--
       ===================================================================
         Cleans everything
       ===================================================================
  -->
	<target name="tidy"
          depends="clean-all"
          description="--> cleans up everything">
		<delete dir="./eclipse" />
		<delete dir="${y.javadoc}" />
		<delete>
			<fileset dir="." includes="**/*~" defaultexcludes="no"/>
			<fileset dir="${y.deploy}/bin" includes="**/yooreeka.log" defaultexcludes="no"/>						
		</delete>
	</target>


	<!--
       ===================================================================
         Creates the API documentation
       ===================================================================
  -->
	<target name="docs" depends="init" description="--> creates the API documentation for iweb2">

		<!-- Yooreeka API -->
		<echo message="Removing the old and creating a new Javadoc folder ..." />

		<delete dir="${y.javadoc}"/>

		<mkdir dir="${y.javadoc}"/>

		<javadoc packagenames="org.yooreeka.*"
         sourcepath="${y.src}"
         destdir="${y.javadoc}"
	     author="true"
         version="true"
         use="true"
         windowtitle="${project.Name} API">

			<doctitle>
				<![CDATA[<h2>${project.Name}</h2>]]></doctitle>
		<classpath refid="compile.classpath"/>
		<link href="http://code.google.com/p/yooreeka/"/>
	</javadoc>


	<echo message="docs build complete" />
</target>

<!-- ========================================================== -->

<target name="prepare-test-data" depends="init">
	<!-- empty for now. -->
</target>

<target name="test" depends="compile,prepare-test-data">
	<!--
    To run specific test or group of tests use: 
    ant test -Dtest=DataSetTest
    ant test -Dtest=*TestExt
    -->
	<junit fork="yes" tempdir="${y.build.temp}"
      errorProperty="test.failed"
      failureProperty="test.failed"
      reloading="false">
		<jvmarg value="-Xms2048M"/>
		<jvmarg value="-Xmx2048M"/>
		<jvmarg value="-Dyooreeka.home=${y.root}"/>
		<sysproperty key="data.dir" file="${y.data}"/>
		<sysproperty key="temp.dir" file="${y.build.temp}"/>
		<!--
      <sysproperty key="log4j.debug" value=""/>
      -->
		<classpath>
			<pathelement location="${y.build.bytecode}"/>
			<pathelement location="${y.deploy}/conf"/>
			<path refid="compile.classpath"/>
		</classpath>
		<formatter type="brief" usefile="false"/>
		<batchtest if="test">
			<fileset dir="${y.build.bytecode}" includes="org/yooreeka/test/beanshellscripts/**/${test}.class"/>
		</batchtest>
		<batchtest unless="test">
			<fileset dir="${y.build.bytecode}" includes="org/yooreeka/test/beanshellscripts/**/*Test.class"/>
		</batchtest>
	</junit>
	<fail if="test.failed">Test(s) failed!!!</fail>
</target>
</project>

